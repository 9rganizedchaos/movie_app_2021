{"version":3,"sources":["Movie.js","App.js","index.js"],"names":["Movie","year","title","summary","poster","genres","className","src","alt","map","genre","index","length","slice","App","state","isLoading","movies","getMovies","a","axios","get","data","setState","this","movie","id","medium_cover_image","React","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+RAmCeA,MA/Bf,YAA0D,IAAzCC,EAAwC,EAAxCA,KAAMC,EAAkC,EAAlCA,MAAOC,EAA2B,EAA3BA,QAASC,EAAkB,EAAlBA,OAAQC,EAAU,EAAVA,OAC7C,OACE,sBAAKC,UAAU,QAAf,UACE,qBAAKC,IAAKH,EAAQI,IAAKN,EAAOA,MAAOA,IACrC,sBAAKI,UAAU,cAAf,UACE,oBAAIA,UAAU,eAAd,SAA8BJ,IAC9B,oBAAII,UAAU,cAAd,SAA6BL,IAC7B,oBAAIK,UAAU,gBAAd,SACGD,EAAOI,KAAI,SAACC,EAAOC,GAAR,OACV,oBAAgBL,UAAU,gBAA1B,SACGI,GADMC,QAKb,mBAAGL,UAAU,iBAAb,SACGH,EAAQS,OAAS,IAAMT,EAAQU,MAAM,EAAG,KAAO,MAAQV,WCiCnDW,G,kNA9CbC,MAAQ,CACNC,WAAW,EACXC,OAAQ,I,EAEVC,U,sBAAY,8BAAAC,EAAA,sEAKAC,IAAMC,IACd,yEANQ,gBAGEJ,EAHF,EAERK,KACEA,KAAQL,OAKZ,EAAKM,SAAS,CAAEN,SAAQD,WAAW,IARzB,2C,uDAUZ,WACEQ,KAAKN,c,oBAGP,WAAU,IAAD,EACuBM,KAAKT,MAA3BC,EADD,EACCA,UAAWC,EADZ,EACYA,OACnB,OACE,yBAASX,UAAU,YAAnB,SACGU,EACC,qBAAKV,UAAU,SAAf,SACE,sBAAMA,UAAU,eAAhB,0BAGF,qBAAKA,UAAU,SAAf,SACGW,EAAOR,KAAI,SAACgB,GAAD,OACV,cAAC,EAAD,CAEEC,GAAID,EAAMC,GACVzB,KAAMwB,EAAMxB,KACZC,MAAOuB,EAAMvB,MACbC,QAASsB,EAAMtB,QACfC,OAAQqB,EAAME,mBACdtB,OAAQoB,EAAMpB,QANToB,EAAMC,e,GA/BTE,IAAMC,YCDxBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.419334f9.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./Movie.css\";\n\nfunction Movie({ year, title, summary, poster, genres }) {\n  return (\n    <div className=\"movie\">\n      <img src={poster} alt={title} title={title} />\n      <div className=\"movie__data\">\n        <h3 className=\"movie__title\">{title}</h3>\n        <h5 className=\"movie__year\">{year}</h5>\n        <ul className=\"movie__genres\">\n          {genres.map((genre, index) => (\n            <li key={index} className=\"genres__genre\">\n              {genre}\n            </li>\n          ))}\n        </ul>\n        <p className=\"movie__summary\">\n          {summary.length > 180 ? summary.slice(0, 180) + \"...\" : summary}\n        </p>\n      </div>\n    </div>\n  );\n}\n\nMovie.propTypes = {\n  id: PropTypes.number.isRequired,\n  year: PropTypes.number.isRequired,\n  title: PropTypes.string.isRequired,\n  summary: PropTypes.string.isRequired,\n  poster: PropTypes.string.isRequired,\n  genres: PropTypes.arrayOf(PropTypes.string).isRequired,\n};\n\nexport default Movie;\n","import React from \"react\";\nimport axios from \"axios\";\nimport Movie from \"./Movie\";\nimport \"./App.css\";\n\nclass App extends React.Component {\n  state = {\n    isLoading: true,\n    movies: [],\n  };\n  getMovies = async () => {\n    const {\n      data: {\n        data: { movies },\n      },\n    } = await axios.get(\n      \"https://yts-proxy.nomadcoders1.now.sh/list_movies.json?sort_by=rating\"\n    );\n    this.setState({ movies, isLoading: false });\n  };\n  componentDidMount() {\n    this.getMovies();\n  }\n\n  render() {\n    const { isLoading, movies } = this.state;\n    return (\n      <section className=\"container\">\n        {isLoading ? (\n          <div className=\"loader\">\n            <span className=\"loader__text\">Loading...</span>\n          </div>\n        ) : (\n          <div className=\"movies\">\n            {movies.map((movie) => (\n              <Movie\n                key={movie.id}\n                id={movie.id}\n                year={movie.year}\n                title={movie.title}\n                summary={movie.summary}\n                poster={movie.medium_cover_image}\n                genres={movie.genres}\n              />\n            ))}\n          </div>\n        )}\n      </section>\n    );\n  }\n}\n\nexport default App;\n\n// 리액트의 모든 엘리먼트는 고유해야 함\n// prop-types가 하는 일: 내가 전달받은 props가 내가 원하는 props인지 확인해주는 역할\n\n// 펑션 컴포넌트는 함수여서 리턴을 갖지만, 클래스컴포넌트는 리턴 아니고, 렌더라는 메소드를 갖고 있다.\n// 리액트는 자동으로 클래스 컴포넌트의 렌더메소드를 실행한다\n// 스테이트는 데이터를 담아두는 객체이고, 그 안에 담기는 데이터는 변한다.\n// 컴포넌트의 데이터를 바꾸고 싶을 때 스테이트를 쓰는 것임.\n\n// 절대 스테이트의 데이터를 직접 변경하지 않도록 한다.\n// 매번 state의 상태를 변경할 때 react가 render function을 호출해서 바꿔주길 원한다.\n// 그럴 때 setState를 써야함\n// setState를 호출할 때마다 react는 새로운 state와 함께 render function을 호출한다.\n\n// Life cycle method는 기본적으로 react가 component를 생성하고 없애는 방법이다.\n// mounting: being born (constructor / render / componentDidMount)\n// updating (componentDidUpdate)\n// unmounting: component가 죽는 것 (componentWillUnmount)\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// 컴포넌트는 HTML을 반환하는 함수\n// jsx는 react에 특화된 개념 중 하나, 거의 유일함\n"],"sourceRoot":""}